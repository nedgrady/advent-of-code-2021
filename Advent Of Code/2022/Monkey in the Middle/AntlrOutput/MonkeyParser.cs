//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Code\advent-of-code-2021\Advent Of Code\2022\Monkey in the Middle\Monkey.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class MonkeyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NONZERODIGIT=12, DIGIT=13, NUMBER=14, WORD=15, WHITESPACE=16, 
		NEWLINE=17, WHITEJUNK=18, OPERATOR=19;
	public const int
		RULE_monkeyNumber = 0, RULE_monkeyProgram = 1, RULE_monkeyDefinitions = 2, 
		RULE_monkeyDefinition = 3, RULE_monkeyHeader = 4, RULE_monkeyStartingItems = 5, 
		RULE_items = 6, RULE_item = 7, RULE_monkeyOperation = 8, RULE_monkeyOperand = 9, 
		RULE_monkeyTest = 10, RULE_monkeyTestCondition = 11, RULE_monkeyTestConditionDivisor = 12, 
		RULE_trueAction = 13, RULE_falseAction = 14;
	public static readonly string[] ruleNames = {
		"monkeyNumber", "monkeyProgram", "monkeyDefinitions", "monkeyDefinition", 
		"monkeyHeader", "monkeyStartingItems", "items", "item", "monkeyOperation", 
		"monkeyOperand", "monkeyTest", "monkeyTestCondition", "monkeyTestConditionDivisor", 
		"trueAction", "falseAction"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Monkey'", "':'", "'Starting items:'", "','", "'Operation: new ='", 
		"'old'", "'Test'", "'divisible'", "'by'", "'If true: throw to monkey'", 
		"'If false: throw to monkey'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NONZERODIGIT", "DIGIT", "NUMBER", "WORD", "WHITESPACE", "NEWLINE", "WHITEJUNK", 
		"OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Monkey.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MonkeyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MonkeyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MonkeyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MonkeyNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(MonkeyParser.DIGIT, 0); }
		public MonkeyNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyNumberContext monkeyNumber() {
		MonkeyNumberContext _localctx = new MonkeyNumberContext(Context, State);
		EnterRule(_localctx, 0, RULE_monkeyNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			Match(DIGIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyDefinitionsContext monkeyDefinitions() {
			return GetRuleContext<MonkeyDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MonkeyParser.Eof, 0); }
		public MonkeyProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyProgram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyProgramContext monkeyProgram() {
		MonkeyProgramContext _localctx = new MonkeyProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_monkeyProgram);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			monkeyDefinitions();
			State = 33;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyDefinitionContext[] monkeyDefinition() {
			return GetRuleContexts<MonkeyDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyDefinitionContext monkeyDefinition(int i) {
			return GetRuleContext<MonkeyDefinitionContext>(i);
		}
		public MonkeyDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyDefinitionsContext monkeyDefinitions() {
		MonkeyDefinitionsContext _localctx = new MonkeyDefinitionsContext(Context, State);
		EnterRule(_localctx, 4, RULE_monkeyDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 35;
				monkeyDefinition();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyHeaderContext monkeyHeader() {
			return GetRuleContext<MonkeyHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyStartingItemsContext monkeyStartingItems() {
			return GetRuleContext<MonkeyStartingItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyOperationContext monkeyOperation() {
			return GetRuleContext<MonkeyOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyTestContext monkeyTest() {
			return GetRuleContext<MonkeyTestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MonkeyParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MonkeyParser.Eof, 0); }
		public MonkeyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyDefinitionContext monkeyDefinition() {
		MonkeyDefinitionContext _localctx = new MonkeyDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_monkeyDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			monkeyHeader();
			State = 41;
			monkeyStartingItems();
			State = 42;
			monkeyOperation();
			State = 43;
			monkeyTest();
			State = 44;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyNumberContext monkeyNumber() {
			return GetRuleContext<MonkeyNumberContext>(0);
		}
		public MonkeyHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyHeaderContext monkeyHeader() {
		MonkeyHeaderContext _localctx = new MonkeyHeaderContext(Context, State);
		EnterRule(_localctx, 8, RULE_monkeyHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(T__0);
			State = 47;
			monkeyNumber();
			State = 48;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyStartingItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemsContext items() {
			return GetRuleContext<ItemsContext>(0);
		}
		public MonkeyStartingItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyStartingItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyStartingItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyStartingItemsContext monkeyStartingItems() {
		MonkeyStartingItemsContext _localctx = new MonkeyStartingItemsContext(Context, State);
		EnterRule(_localctx, 10, RULE_monkeyStartingItems);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(T__2);
			State = 51;
			items();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public ItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemsContext items() {
		ItemsContext _localctx = new ItemsContext(Context, State);
		EnterRule(_localctx, 12, RULE_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			item();
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 54;
				Match(T__3);
				State = 55;
				item();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MonkeyParser.NUMBER, 0); }
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 14, RULE_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyOperandContext[] monkeyOperand() {
			return GetRuleContexts<MonkeyOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyOperandContext monkeyOperand(int i) {
			return GetRuleContext<MonkeyOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(MonkeyParser.OPERATOR, 0); }
		public MonkeyOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyOperationContext monkeyOperation() {
		MonkeyOperationContext _localctx = new MonkeyOperationContext(Context, State);
		EnterRule(_localctx, 16, RULE_monkeyOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__4);
			State = 64;
			monkeyOperand();
			State = 65;
			Match(OPERATOR);
			State = 66;
			monkeyOperand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MonkeyParser.NUMBER, 0); }
		public MonkeyOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyOperandContext monkeyOperand() {
		MonkeyOperandContext _localctx = new MonkeyOperandContext(Context, State);
		EnterRule(_localctx, 18, RULE_monkeyOperand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyTestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyTestConditionContext monkeyTestCondition() {
			return GetRuleContext<MonkeyTestConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueActionContext trueAction() {
			return GetRuleContext<TrueActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FalseActionContext falseAction() {
			return GetRuleContext<FalseActionContext>(0);
		}
		public MonkeyTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyTest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyTestContext monkeyTest() {
		MonkeyTestContext _localctx = new MonkeyTestContext(Context, State);
		EnterRule(_localctx, 20, RULE_monkeyTest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			monkeyTestCondition();
			State = 71;
			trueAction();
			State = 72;
			falseAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyTestConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyTestConditionDivisorContext monkeyTestConditionDivisor() {
			return GetRuleContext<MonkeyTestConditionDivisorContext>(0);
		}
		public MonkeyTestConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyTestCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyTestCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyTestConditionContext monkeyTestCondition() {
		MonkeyTestConditionContext _localctx = new MonkeyTestConditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_monkeyTestCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__6);
			State = 75;
			Match(T__1);
			State = 76;
			Match(T__7);
			State = 77;
			Match(T__8);
			State = 78;
			monkeyTestConditionDivisor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonkeyTestConditionDivisorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MonkeyParser.NUMBER, 0); }
		public MonkeyTestConditionDivisorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monkeyTestConditionDivisor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonkeyTestConditionDivisor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonkeyTestConditionDivisorContext monkeyTestConditionDivisor() {
		MonkeyTestConditionDivisorContext _localctx = new MonkeyTestConditionDivisorContext(Context, State);
		EnterRule(_localctx, 24, RULE_monkeyTestConditionDivisor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyNumberContext monkeyNumber() {
			return GetRuleContext<MonkeyNumberContext>(0);
		}
		public TrueActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrueActionContext trueAction() {
		TrueActionContext _localctx = new TrueActionContext(Context, State);
		EnterRule(_localctx, 26, RULE_trueAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(T__9);
			State = 83;
			monkeyNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FalseActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MonkeyNumberContext monkeyNumber() {
			return GetRuleContext<MonkeyNumberContext>(0);
		}
		public FalseActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_falseAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMonkeyVisitor<TResult> typedVisitor = visitor as IMonkeyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FalseActionContext falseAction() {
		FalseActionContext _localctx = new FalseActionContext(Context, State);
		EnterRule(_localctx, 28, RULE_falseAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(T__10);
			State = 86;
			monkeyNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '[', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x6', '\x4', '\'', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '(', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', ';', '\n', '\b', '\f', '\b', '\xE', '\b', '>', '\v', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x2', '\x2', '\x11', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', '\x2', '\x4', '\x3', '\x3', '\x13', '\x13', '\x4', '\x2', '\b', 
		'\b', '\x10', '\x10', '\x2', 'M', '\x2', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '&', '\x3', '\x2', '\x2', 
		'\x2', '\b', '*', '\x3', '\x2', '\x2', '\x2', '\n', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x34', '\x3', '\x2', '\x2', '\x2', '\xE', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '?', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x14', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'H', '\x3', '\x2', '\x2', '\x2', '\x18', 'L', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', 'R', '\x3', '\x2', '\x2', '\x2', '\x1C', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', 'W', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\a', '\xF', '\x2', '\x2', '!', '\x3', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\x5', '\x6', '\x4', '\x2', '#', '$', '\a', '\x2', '\x2', '\x3', 
		'$', '\x5', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\x5', '\b', '\x5', 
		'\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', 
		'\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '\a', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x5', 
		'\n', '\x6', '\x2', '+', ',', '\x5', '\f', '\a', '\x2', ',', '-', '\x5', 
		'\x12', '\n', '\x2', '-', '.', '\x5', '\x16', '\f', '\x2', '.', '/', '\t', 
		'\x2', '\x2', '\x2', '/', '\t', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\x3', '\x2', '\x2', '\x31', '\x32', '\x5', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\a', '\x4', '\x2', '\x2', '\x33', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\a', '\x5', '\x2', '\x2', '\x35', '\x36', 
		'\x5', '\xE', '\b', '\x2', '\x36', '\r', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'<', '\x5', '\x10', '\t', '\x2', '\x38', '\x39', '\a', '\x6', '\x2', '\x2', 
		'\x39', ';', '\x5', '\x10', '\t', '\x2', ':', '\x38', '\x3', '\x2', '\x2', 
		'\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x10', 
		'\x2', '\x2', '@', '\x11', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\a', '\a', '\x2', '\x2', '\x42', '\x43', '\x5', '\x14', '\v', '\x2', 
		'\x43', '\x44', '\a', '\x15', '\x2', '\x2', '\x44', '\x45', '\x5', '\x14', 
		'\v', '\x2', '\x45', '\x13', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\t', '\x3', '\x2', '\x2', 'G', '\x15', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\x5', '\x18', '\r', '\x2', 'I', 'J', '\x5', '\x1C', '\xF', '\x2', 
		'J', 'K', '\x5', '\x1E', '\x10', '\x2', 'K', '\x17', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\a', '\t', '\x2', '\x2', 'M', 'N', '\a', '\x4', '\x2', 
		'\x2', 'N', 'O', '\a', '\n', '\x2', '\x2', 'O', 'P', '\a', '\v', '\x2', 
		'\x2', 'P', 'Q', '\x5', '\x1A', '\xE', '\x2', 'Q', '\x19', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\a', '\x10', '\x2', '\x2', 'S', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\a', '\f', '\x2', '\x2', 'U', 'V', '\x5', 
		'\x2', '\x2', '\x2', 'V', '\x1D', '\x3', '\x2', '\x2', '\x2', 'W', 'X', 
		'\a', '\r', '\x2', '\x2', 'X', 'Y', '\x5', '\x2', '\x2', '\x2', 'Y', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '(', '<',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
