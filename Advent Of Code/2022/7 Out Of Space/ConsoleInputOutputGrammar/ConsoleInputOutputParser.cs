//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Code\advent-of-code-2021\Advent Of Code\2022\7 Out Of Space\ConsoleInputOutput.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ConsoleInputOutputParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, NUMBER=7, WORD=8, WHITESPACE=9, 
		NEWLINE=10;
	public const int
		RULE_extension = 0, RULE_fileName = 1, RULE_fileSize = 2, RULE_fileDescriptor = 3, 
		RULE_directoryName = 4, RULE_program = 5, RULE_commands = 6, RULE_cdUp = 7, 
		RULE_lsCommand = 8, RULE_fileSizeCommand = 9, RULE_dirCommand = 10, RULE_cdDown = 11, 
		RULE_cdCommand = 12, RULE_command = 13;
	public static readonly string[] ruleNames = {
		"extension", "fileName", "fileSize", "fileDescriptor", "directoryName", 
		"program", "commands", "cdUp", "lsCommand", "fileSizeCommand", "dirCommand", 
		"cdDown", "cdCommand", "command"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'/'", "'$ cd ..'", "'$ ls'", "'dir'", "'$ cd'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "NUMBER", "WORD", "WHITESPACE", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ConsoleInputOutput.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ConsoleInputOutputParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ConsoleInputOutputParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ConsoleInputOutputParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(ConsoleInputOutputParser.WORD, 0); }
		public ExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionContext extension() {
		ExtensionContext _localctx = new ExtensionContext(Context, State);
		EnterRule(_localctx, 0, RULE_extension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(T__0);
			State = 29;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(ConsoleInputOutputParser.WORD, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNameContext fileName() {
		FileNameContext _localctx = new FileNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_fileName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ConsoleInputOutputParser.NUMBER, 0); }
		public FileSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSizeContext fileSize() {
		FileSizeContext _localctx = new FileSizeContext(Context, State);
		EnterRule(_localctx, 4, RULE_fileSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileDescriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileNameContext fileName() {
			return GetRuleContext<FileNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionContext[] extension() {
			return GetRuleContexts<ExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionContext extension(int i) {
			return GetRuleContext<ExtensionContext>(i);
		}
		public FileDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileDescriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileDescriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileDescriptorContext fileDescriptor() {
		FileDescriptorContext _localctx = new FileDescriptorContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileDescriptor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			fileName();
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 36;
				extension();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectoryNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(ConsoleInputOutputParser.WORD, 0); }
		public DirectoryNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directoryName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectoryName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectoryNameContext directoryName() {
		DirectoryNameContext _localctx = new DirectoryNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_directoryName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_la = TokenStream.LA(1);
			if ( !(_la==T__1 || _la==WORD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ConsoleInputOutputParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 10, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			commands();
			State = 45;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public CommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandsContext commands() {
		CommandsContext _localctx = new CommandsContext(Context, State);
		EnterRule(_localctx, 12, RULE_commands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 47;
				command();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CdUpContext : ParserRuleContext {
		public CdUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cdUp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCdUp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CdUpContext cdUp() {
		CdUpContext _localctx = new CdUpContext(Context, State);
		EnterRule(_localctx, 14, RULE_cdUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsCommandContext : ParserRuleContext {
		public LsCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsCommandContext lsCommand() {
		LsCommandContext _localctx = new LsCommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_lsCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSizeCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeContext fileSize() {
			return GetRuleContext<FileSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileDescriptorContext fileDescriptor() {
			return GetRuleContext<FileDescriptorContext>(0);
		}
		public FileSizeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSizeCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSizeCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSizeCommandContext fileSizeCommand() {
		FileSizeCommandContext _localctx = new FileSizeCommandContext(Context, State);
		EnterRule(_localctx, 18, RULE_fileSizeCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			fileSize();
			State = 58;
			fileDescriptor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectoryNameContext directoryName() {
			return GetRuleContext<DirectoryNameContext>(0);
		}
		public DirCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dirCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirCommandContext dirCommand() {
		DirCommandContext _localctx = new DirCommandContext(Context, State);
		EnterRule(_localctx, 20, RULE_dirCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(T__4);
			State = 61;
			directoryName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CdDownContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectoryNameContext directoryName() {
			return GetRuleContext<DirectoryNameContext>(0);
		}
		public CdDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cdDown; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCdDown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CdDownContext cdDown() {
		CdDownContext _localctx = new CdDownContext(Context, State);
		EnterRule(_localctx, 22, RULE_cdDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__5);
			State = 64;
			directoryName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CdCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CdUpContext cdUp() {
			return GetRuleContext<CdUpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CdDownContext cdDown() {
			return GetRuleContext<CdDownContext>(0);
		}
		public CdCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cdCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCdCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CdCommandContext cdCommand() {
		CdCommandContext _localctx = new CdCommandContext(Context, State);
		EnterRule(_localctx, 24, RULE_cdCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 66;
				cdUp();
				}
				break;
			case T__5:
				{
				State = 67;
				cdDown();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CdCommandContext cdCommand() {
			return GetRuleContext<CdCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LsCommandContext lsCommand() {
			return GetRuleContext<LsCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirCommandContext dirCommand() {
			return GetRuleContext<DirCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeCommandContext fileSizeCommand() {
			return GetRuleContext<FileSizeCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(ConsoleInputOutputParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(ConsoleInputOutputParser.NEWLINE, i);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConsoleInputOutputVisitor<TResult> typedVisitor = visitor as IConsoleInputOutputVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 26, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__5:
				{
				State = 70;
				cdCommand();
				}
				break;
			case T__3:
				{
				State = 71;
				lsCommand();
				}
				break;
			case T__4:
				{
				State = 72;
				dirCommand();
				}
				break;
			case NUMBER:
				{
				State = 73;
				fileSizeCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 76;
				Match(NEWLINE);
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', 'U', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', 
		'\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', '\xE', 
		'\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '(', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '+', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\a', '\b', '\x33', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x36', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', 'G', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', 'M', '\n', '\xF', '\x3', '\xF', '\a', 
		'\xF', 'P', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 'S', '\v', '\xF', 
		'\x3', '\xF', '\x2', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', 
		'\x3', '\x4', '\x2', '\x4', '\x4', '\n', '\n', '\x2', 'M', '\x2', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '!', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'#', '\x3', '\x2', '\x2', '\x2', '\b', '%', '\x3', '\x2', '\x2', '\x2', 
		'\n', ',', '\x3', '\x2', '\x2', '\x2', '\f', '.', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x34', '\x3', '\x2', '\x2', '\x2', '\x10', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x39', '\x3', '\x2', '\x2', '\x2', '\x14', 
		';', '\x3', '\x2', '\x2', '\x2', '\x16', '>', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', 'L', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\a', '\x3', '\x2', '\x2', '\x1F', ' ', '\a', '\n', '\x2', '\x2', ' ', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\n', '\x2', '\x2', 
		'\"', '\x5', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\t', '\x2', 
		'\x2', '$', '\a', '\x3', '\x2', '\x2', '\x2', '%', ')', '\x5', '\x4', 
		'\x3', '\x2', '&', '(', '\x5', '\x2', '\x2', '\x2', '\'', '&', '\x3', 
		'\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', 
		'\t', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\t', '\x2', '\x2', '\x2', '-', '\v', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\x5', '\xE', '\b', '\x2', '/', '\x30', '\a', '\x2', '\x2', 
		'\x3', '\x30', '\r', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', '\x5', 
		'\x1C', '\xF', '\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\x5', '\x2', '\x2', '\x38', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\a', '\x6', '\x2', '\x2', ':', '\x13', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\x5', '\x6', '\x4', '\x2', '<', '=', '\x5', '\b', 
		'\x5', '\x2', '=', '\x15', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', 
		'\a', '\x2', '\x2', '?', '@', '\x5', '\n', '\x6', '\x2', '@', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\b', '\x2', '\x2', 
		'\x42', '\x43', '\x5', '\n', '\x6', '\x2', '\x43', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x44', 'G', '\x5', '\x10', '\t', '\x2', '\x45', 'G', '\x5', 
		'\x18', '\r', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'M', '\x5', '\x1A', '\xE', '\x2', 'I', 'M', '\x5', '\x12', 
		'\n', '\x2', 'J', 'M', '\x5', '\x16', '\f', '\x2', 'K', 'M', '\x5', '\x14', 
		'\v', '\x2', 'L', 'H', '\x3', '\x2', '\x2', '\x2', 'L', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'Q', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\a', '\f', 
		'\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1D', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\a', ')', '\x34', '\x46', 'L', 'Q',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
